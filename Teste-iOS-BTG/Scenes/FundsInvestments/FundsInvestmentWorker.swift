//
//  FundsInvestmentWorker.swift
//  Teste-iOS-BTG
//
//  Created by Danilo Henrique on 30/01/19.
//  Copyright Â© 2019 BTG Pactual. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import Alamofire

typealias responseHandler = (_ response: FundsInvestments.Funds.Response) -> Void

class FundsInvestmentsWorker {
    
    func fetchFunds(request: FundsInvestments.Funds.Request, completion: @escaping(responseHandler) ) {
        
        let url = URL(string: Constants.baseUrl + request.pathURL)!
        
        Alamofire.request(url).responseJSON { (response) in
            let result = response.result
            switch result {
            case .success(let json):
                print(json)
            case .failure(let error):
                print(error)
            }
        }
//
//        Alamofire.request(.GET, URLString, parameters: ["foo": "bar"])
//            .responseJSON { request, response, result in
//                switch result {
//                case .Success(let JSON):
//                    print("Success with JSON: \(JSON)")
//
//                case .Failure(let data, let error):
//                    print("Request failed with error: \(error)")
//
//                    if let data = data {
//                        print("Response data: \(NSString(data: data, encoding: NSUTF8StringEncoding)!)")
//                    }
//                }
        
        
//        request(url, method: .get, parameters: nil, encoding: <#T##ParameterEncoding#>, headers: ["Accept": "application/json"])
//        let ApiManager = MoyaProvider<FundsServiceAPI>(plugins: [NetworkLoggerPlugin(verbose: true)])
//
//
//        ApiManager.request(.fundsList) { (result) in
//            switch result {
//            case .success(let value):
//                do {
//                    let funds = try value.map([Fund].self)
//                    completion(FundsInvestments.Funds.Response(funds: funds, error: false, message: nil))
//                } catch {
//                    completion(FundsInvestments.Funds.Response(funds: nil, error: true, message: error.localizedDescription))
//                }
//            case .failure(let error):
//                completion(FundsInvestments.Funds.Response(funds: nil, error: true, message: error.localizedDescription))
//            }
//        }
    }
}
