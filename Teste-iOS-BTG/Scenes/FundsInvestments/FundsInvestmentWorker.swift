//
//  FundsInvestmentWorker.swift
//  Teste-iOS-BTG
//
//  Created by Danilo Henrique on 30/01/19.
//  Copyright Â© 2019 BTG Pactual. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import Moya

typealias responseHandler = (_ response: FundsInvestments.FetchFunds.Response) -> Void

class FundsInvestmentsWorker {
    
    func fetchFunds(request: FundsInvestments.FetchFunds.Request, completion: @escaping(responseHandler)) {
        
        let ApiManager = MoyaProvider<FundsServiceAPI>()
        
        ApiManager.request(.fundsList) { (result) in
            switch result {
            case .success(let value):
                do {
                    let funds = try value.map([FundModel].self)
                    completion(FundsInvestments.FetchFunds.Response(funds: funds, error: false, message: nil))
                } catch {
                    completion(FundsInvestments.FetchFunds.Response(funds: nil, error: true, message: error.localizedDescription))
                }
            case .failure(let error):
                completion(FundsInvestments.FetchFunds.Response(funds: nil, error: true, message: error.localizedDescription))
            }
        }
    }
    
    func searchFunds(request: FundsInvestments.FetchFunds.Request, funds: [FundModel], completion: @escaping(responseHandler)) {
        let filtered = funds.filter({ (fund) -> Bool in
            return fund.product?.localizedCaseInsensitiveContains(request.product ?? "") ?? false
        })
        completion(FundsInvestments.FetchFunds.Response(funds: filtered, error: false, message: nil))
    }
    
    func filterFunds(request: FundsInvestments.FetchFunds.Request, funds: [FundModel],completion: @escaping(responseHandler)) {
        guard let filters = request.filter else {
            completion(FundsInvestments.FetchFunds.Response(funds: funds, error: false, message: nil))
            return
        }
        
        var filtered = funds.filter({ (fund) -> Bool in
            if let productFilter = request.product,
                let fundProduct = fund.product,
                !fundProduct.localizedCaseInsensitiveContains(productFilter) {
                return false
            }
            if let categoryFilter = filters.category,
                let fundCategory = fund.detail?.categoryDescription,
                !fundCategory.localizedCaseInsensitiveContains(categoryFilter) {
                return false
            }
            if let managerFilter = filters.manager,
                let fundManager = fund.detail?.manager,
                !fundManager.localizedCaseInsensitiveContains(managerFilter) {
                return false
            }
            if let rescueFilter = filters.rescue,
                let fundRescue = fund.detail?.rescueQuota?.split(separator: "+").last,
                rescueFilter < Int(fundRescue) ?? 0 {
                return false
            }
            for risk in filters.risks {
                if risk.value == false,
                    fund.riskLevel == risk.key.rawValue {
                    return false
                }
            }
            return true
        })
        
        if let orderByFilter = filters.orderBy {
            switch orderByFilter {
            case .maxRescue:
                filtered.sort { (fundOne, fundTwo) -> Bool in
                    guard let fundRescueOne = fundOne.detail?.rescueQuota?.split(separator: "+").last,
                        let fundRescueTwo = fundTwo.detail?.rescueQuota?.split(separator: "+").last else { return false }
                    
                    return Int(fundRescueOne)! > Int(fundRescueTwo)!
                }
            case .minRescue:
                filtered.sort { (fundOne, fundTwo) -> Bool in
                    guard let fundRescueOne = fundOne.detail?.rescueQuota?.split(separator: "+").last,
                        let fundRescueTwo = fundTwo.detail?.rescueQuota?.split(separator: "+").last else { return false }
                    
                    return Int(fundRescueTwo)! > Int(fundRescueOne)!
                }
            }
        }
        completion(FundsInvestments.FetchFunds.Response(funds: filtered, error: false, message: nil))
    }
    
}
