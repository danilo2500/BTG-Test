//
//  FundsInvestmentsViewController.swift
//  Teste-iOS-BTG
//
//  Created by Danilo Henrique on 30/01/19.
//  Copyright (c) Â© 2019 BTG Pactual. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FundsInvestmentsDisplayLogic: class {
    func displayFetchedFunds(viewModel: FundsInvestments.Funds.ViewModel)
    func errorFetchingFunds(message: String)
}

class FundsInvestmentsViewController: UIViewController, FundsInvestmentsDisplayLogic {
    
    @IBOutlet weak var tableView: UITableView!
    
    var interactor: FundsInvestmentsBusinessLogic?
    var router: (NSObjectProtocol & FundsInvestmentsRoutingLogic & FundsInvestmentsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = FundsInvestmentsInteractor()
        let presenter = FundsInvestmentsPresenter()
        let router = FundsInvestmentsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
//    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
//    {
//        if let scene = segue.identifier {
//            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
//            if let router = router, router.responds(to: selector) {
//                router.perform(selector, with: segue)
//            }
//        }
//    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()

        tableView.estimatedRowHeight = ExpandableHeaderViewController.closedCellHeight
        tableView.rowHeight = UITableView.automaticDimension
        
        configureLayout()
        fetchFunds()
    }
    
    private func configureLayout() {
        registerNibFiles()
    }
    
    private func registerNibFiles() {
        let expandableHeader = UINib(nibName: "ExpandableHeader", bundle: nil)
        tableView.register(expandableHeader, forCellReuseIdentifier: "expandableHeader")
    }
    
    func fetchFunds() {
        let request = FundsInvestments.Funds.Request()
        interactor?.fetchFunds(request: request)
    }
    
    func displayFetchedFunds(viewModel: FundsInvestments.Funds.ViewModel) {
        //nameTextField.text = viewModel.name
    }
    
    func errorFetchingFunds(message: String) {
        
    }
    
    var expanded: [Bool] = [false, false, false, false, false]
}

extension FundsInvestmentsViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 5
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "expandableHeader", for: indexPath) as! ExpandableHeaderViewController
        cell.delegate = self
        return cell
    }
//
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        
        
        if expanded[indexPath.row] {
            return ExpandableHeaderViewController.openedCellHeight
        } else {
            return ExpandableHeaderViewController.closedCellHeight
        }
        

        return UITableView.automaticDimension
    }
}

extension FundsInvestmentsViewController: ExpandableHeaderDelegate {
    func didPressExpandButton(_ cell: UITableViewCell) {
        let indexPath = tableView.indexPath(for: cell)
        expanded[indexPath!.row].toggle()
        tableView.reloadData()
    }
}
