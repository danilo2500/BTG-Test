//
//  FundsInvestmentsPresenter.swift
//  Teste-iOS-BTG
//
//  Created by Danilo Henrique on 30/01/19.
//  Copyright Â© 2019 BTG Pactual. All rights reserved.
//
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FundsInvestmentsPresentationLogic
{
    func presentFunds(response: FundsInvestments.Funds.Response)
}

class FundsInvestmentsPresenter: FundsInvestmentsPresentationLogic
{
    weak var viewController: FundsInvestmentsDisplayLogic?
    
    // MARK: Do something
    
    func presentFunds(response: FundsInvestments.Funds.Response) {
        
        guard let responseFunds = response.funds else {
            viewController?.errorFetchingFunds(message: response.message ?? "-")
            return
        }
        
        var displayFunds: [FundsInvestments.Funds.ViewModel.DisplayViewModel] = []
        for fund in responseFunds {
            let displayFund = FundsInvestments.Funds.ViewModel.DisplayViewModel(
                product: fund.product ?? "-",
                categoryDescription: fund.detail?.categoryDescription ?? "-",
                monthProfitability: FormatterUtils.formatPercentage(value: fund.profitability?.month) ?? "-",
                yearProfitability: FormatterUtils.formatPercentage(value: fund.profitability?.year) ?? "-",
                twelveMonthsProfitability:  FormatterUtils.formatPercentage(value: fund.profitability?.twelveMonths) ?? "-",
                minimumInitialInvestment: FormatterUtils.formatNumberToReal(value: fund.minimumInitialInvestment) ?? "-",
                manager: fund.detail?.manager ?? "-",
                begin: FormatterUtils.formatDate(dateString: fund.begin) ?? "-",
                netEquity: FormatterUtils.formatNumberToReal(value: fund.netEquity) ?? "-",
                investimentQuota: fund.detail?.investimentQuota ?? "-"
            )
            
            displayFunds.append(displayFund)
        }
        
        let viewModel = FundsInvestments.Funds.ViewModel(displayFunds: displayFunds)
        viewController?.displayFetchedFunds(viewModel: viewModel)
    }
}
